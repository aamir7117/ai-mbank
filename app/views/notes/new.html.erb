
<%# this is the nav bar  %>
<div class="nav d-flex profile justify-content-between align-items-center">
  <button class="button-85"><%= link_to "Inbox", notes_path %></button>

  <div class="avatar border-radius">
      <div class="grad border-radius spin"></div>
      <button type="button" data-toggle="modal" data-target="#exampleModalCenter">
        <img src="https://lh3.googleusercontent.com/a/AGNmyxYdZLRF4ONYN4IMCGDLA5-rxxvVnuPRAPAYI3op9Q=s192-c-rg-br100" class="avatar-img border-radius" />
      </button>
      </a>
    </div>
</div>


<%# this is a background img %>
<div class="stage">

  <div class="actor"></div>
  <div class="actor"></div>
  <div class="actor"></div>

    <div class="box d-flex">
      <div class="box-2 d-flex" id="mic-container">
        <button class="button rec-effect-4" id='mic-toggle'>
          <i class="fa fa-microphone"></i>
        </button>
      </div>
    </div>
    <div class="recorder-box"></div>
</div>



<!-- Modal bootstrap #1 - profile page click -->
<div class="modal fade" id="exampleModalCenter" tabindex="-1" role="dialog" aria-labelledby="exampleModalCenterTitle" aria-hidden="true">
  <div class="modal-dialog modal-dialog-centered" role="document">
    <div class="modal-content">
      <div class="modal-body nav-menu">

      <ul class="menu">
      <li>
        Profile
        <ul class="sub-menu">
          <li>Change name</li>
          <li>Edit background image</li>
          <li>Edit profile image</li>
        </ul>
      </li>

      <li>
        Settings
        <ul class="sub-menu">
          <li>Language</li>
          <li>Note text type</li>
        </ul>
      </li>

      <li>
        Favorite notes
        <ul class="sub-menu">
        </ul>
      </li>

      <li>
        Log Out
        <ul class="sub-menu">
        </ul>
      </li>
    </ul>


      </div>
    </div>
  </div>
</div>


<!-- Modal bootstrap #2 - voice recording confirmation -->
<div class="modal fade" id="exampleModalReminder" tabindex="-1" aria-labelledby="exampleModalLabel" aria-hidden="true">
  <div class="modal-dialog">
    <div class="modal-content">
      <div class="modal-header">
        <h5 class="modal-title" id="exampleModalLabel">Modal title</h5>
        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
      </div>
      <div class="modal-body" style='color: white;'>
        <p>âœ… your note was saved!</p>
        <p>Go on and live your best life</p>
      </div>
      <div class="modal-footer">
        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
      </div>
    </div>
  </div>
</div>

 <%# timer for the record button %>
<div class="timer" data-controller="timer" ></div>

<script>
  // Html selectors
  const micToggle = document.querySelector("#mic-toggle");
  const micIcon = document.querySelector(".fa.fa-microphone");
  const micContainer = document.querySelector("#mic-conta iner");

  // function to imagify the text in note.text
  function imagify(note)
    {
        // Make fetch request to Rails.
        const crsfToken = document.querySelector("meta[name='csrf-token']").content;
        fetch("/imagify", {
          method: "POST",
          headers: {"X-CSRF-Token": crsfToken, 'Content-Type': 'application/json'},
          body: JSON.stringify(note)
        });
    }

  // Records audio data into const
  const audioChunks = [];
  // Ask user for access to their microphone.
  navigator.mediaDevices.getUserMedia({ audio: true })
  .then(stream => {
    let mediaRecorder = new MediaRecorder(stream);
      mediaRecorder.addEventListener("dataavailable", (event) => {
        // record audio data into array
        audioChunks.push(event.data);
      });
      mediaRecorder.addEventListener("stop", () => {
        // Convert audioChunks into audioBlob.
        const audioBlob = new Blob(audioChunks, { type: 'audio/mpeg' })
        audioChunks.length = 0;

        // append the audioBlob to formData.
        const formData = new FormData();
        formData.append("files", audioBlob);

        // Make fetch request to Rails in order to transcribe.
        const crsfToken = document.querySelector("meta[name='csrf-token']").content;
        fetch("/transcript", {
          method: "POST",
          headers: {"X-CSRF-Token": crsfToken},
          body: formData
        })
        .then(response => response.json())
        .then(note => {
          imagify(note)
          });
      });

      // EventListener to toggle recorder
       micToggle.addEventListener("click", ()=> {
          if (mediaRecorder.state == "inactive") {
            mediaRecorder.start()
            micIcon.style.color = "red";
            micToggle.setAttribute("data-bs-toggle", "modal");
            micToggle.setAttribute("data-bs-target", "#exampleModalReminder");
          } else {
            micIcon.style.color = "white";
            micToggle.removeAttribute("data-bs-toggle");
            micToggle.removeAttribute("data-bs-target");
            mediaRecorder.stop();
          }
        })
    });
</script>
